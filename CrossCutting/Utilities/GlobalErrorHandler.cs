using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Globalization;
using System.ServiceModel;

namespace Indigo.CrossCutting.Utilities
{
    /// <summary>
    /// Global Error Handler used to catch global exception
    /// </summary>
    public class GlobalErrorHandler : System.ServiceModel.Dispatcher.IErrorHandler
    {
        /// <summary>
        /// The Log Folder where log files need to be created
        /// </summary>
        public static string LogPath = null;
        
        /// <summary>
        /// The FTP Server Address (ftp://localhost/Sepura.Logs/)  where the log files would be uploaded
        /// </summary>
        public static string FTPServerAddress = null;

        /// <summary>
        /// FTP Username
        /// </summary>
        public static string FTPUsername = null;
        
        /// <summary>
        /// FTP Password
        /// </summary>
        public static string FTPPassword = null;
        
        /// <summary>
        /// Network Component name of the component who is reporting the error. This is used in prefixing the log file names 
        /// </summary>
        public static string NetworkComponentName = null;

        /// <summary>
        /// If set to true - a standard message is displayed to the user and the original exception is hidden; however the original exception is logged
        /// </summary>
        public static bool ReplaceOriginalError = false;

        /// <summary>
        /// Called in a separate thread to handle / log ftp the exception. Sunch that the user i snot kept waiting to display the message
        /// </summary>
        /// <param name="error"></param>
        public void HandleError(object error)
        {
            if (error is Exception)
            {
                HandleError(error as Exception);
            }
        }

        /// <summary>
        /// Called in a separate thread to handle / log ftp the exception. Such that the user is not kept waiting to display the message
        /// </summary>
        /// <param name="error"></param>
        /// <returns></returns>
        public bool HandleError(Exception error)
        {
            if (LogPath == null || LogPath == string.Empty)
            {
                throw new Exception("Log Path not set");
            }
            else if (!Directory.Exists(LogPath))
            {
                throw new Exception("Log Path " + LogPath + " is not a valid path");
            }
            Guid ticketNumber;
            if (!error.Data.Contains("TicketNumber"))
            {
                //The exception can be handled only if the TicketNumber has been generated by the ProvideFault method
                //else generate a ticket id
                ticketNumber = Guid.NewGuid();
            }
            else
            {
                //Extract the ticket number
                ticketNumber = new Guid(error.Data["TicketNumber"].ToString());
            }
            string logFile = Path.Combine(
                GlobalErrorHandler.LogPath,
                ServerApplicationHelper.GetSafeFileNameForGEX(NetworkComponentName, ticketNumber)
            );

            //LogWriter logWriter = GetLogWriter(logFile);
            //logWriter.Write(GetLogEntry(error, ticketNumber));
            //logWriter.Dispose();

            //TODO: In the development environment we dont have FTP available to us, and this causes subsequent errors masking the actual problem being solved.
            //TransferLogFiles(LogPath);
            
            return false;
        }

        /// <summary>
        /// This method is called in the same thread and the user is kep waited until all processing is done 
        /// This method is responsible in creating a ticket number and wrapping the error as this is the error that is raised to the user
        /// </summary>
        /// <param name="error"></param>
        /// <param name="version"></param>
        /// <param name="fault"></param>
        public void ProvideFault(Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault)
        {
            Guid ticketNumber = Guid.Empty;
            if (error.Data.Contains("TicketNumber"))
            {
                ticketNumber = new Guid(error.Data["TicketNumber"].ToString());
            }
            else
            {
                ticketNumber = Guid.NewGuid();
                error.Data.Add("TicketNumber", ticketNumber);
            }
            GenericException newException = null;
            if (ReplaceOriginalError)
            {
                newException = new GenericException("An unhandled exception has occured", error.Data);
            }
            else
            {
                newException = new GenericException(error);
            }
            FaultException fe = new FaultException<GenericException>(newException, newException.Message);
            System.ServiceModel.Channels.MessageFault messageFault = fe.CreateMessageFault();
            ////System.ServiceModel.Channels.MessageFault messageFault = System.ServiceModel.Channels.MessageFault.CreateFault(FaultCode.CreateReceiverFaultCode(new FaultCode("SepuraFaultCode")), new FaultReason(newException.Message), new ExceptionDetail(newException));
            ////System.ServiceModel.Channels.MessageFault messageFault = newException.CreateMessageFault();
            ////GenericException fe1 = messageFault.GetDetail<GenericException>();
            fault = System.ServiceModel.Channels.Message.CreateMessage(version, messageFault, "http://www.sepura.co.uk/IA/GenericException");
        }

        /// <summary>
        /// Create a message from the exception
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="handlingInstanceID"></param>
        /// <returns></returns>
        private string CreateMessage(Exception exception, Guid handlingInstanceID)
        {
            StringWriter writer = null;
            StringBuilder stringBuilder = null;
            try
            {
                writer = new StringWriter(CultureInfo.InvariantCulture);
                //Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter formatter = new Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter(writer, exception, handlingInstanceID);
                //formatter.Format();
                stringBuilder = writer.GetStringBuilder();

            }
            finally
            {
                if (writer != null)
                {
                    writer.Close();
                }
            }

            return stringBuilder.ToString();
        }

        /// <summary>
        /// Transfer all log files stored in the log folder to the FTP Server (if applicable)
        /// </summary>
        /// <param name="logFolder"></param>
        private void TransferLogFiles(string logFolder)
        {

            if (FTPServerAddress != null && FTPServerAddress != string.Empty & NetworkComponentName != null && NetworkComponentName != string.Empty)
            {
                try
                {
                    //Iterate through all the files in the log folder
                    foreach (string logFile in Directory.GetFiles(logFolder,"*.xml"))
                    {
                        //Upload File
                        System.Net.FtpWebRequest request = (System.Net.FtpWebRequest)System.Net.WebRequest.Create(
                            Path.Combine(FTPServerAddress, Path.GetFileNameWithoutExtension(logFile) + "^" + NetworkComponentName + "." + Path.GetExtension(logFile))
                            );
                        request.Method = System.Net.WebRequestMethods.Ftp.UploadFile;
                        request.Credentials = new System.Net.NetworkCredential(FTPUsername, FTPPassword);

                        // When connecting to IIS SSL is not permitted, until IIS7
                        //request.EnableSsl = true;
                        request.KeepAlive = false;

                        request.UseBinary = true;
                        Stream requestStream = request.GetRequestStream();

                        int readPosition = 0;
                        //Ensure to obtain an exclusive lock to the file
                        using (FileStream stream = System.IO.File.Open(logFile, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                        {
                            while (stream.Position <= stream.Length - 1)
                            {
                                byte[] data = new byte[1024];

                                int bytesRead = stream.Read(data, 0, 1024);
                                requestStream.Write(data, 0, bytesRead);
                                readPosition += bytesRead;
                            }

                            stream.Close();
                        }
                        requestStream.Flush();
                        requestStream.Close();
                        request.ContentLength = readPosition;

                        System.Net.FtpWebResponse response = (System.Net.FtpWebResponse)request.GetResponse();
                        response.Close();
                        //After the file is transferred - move the file to a Sent folder
                        string sentPath = Path.Combine(Path.GetDirectoryName(logFile), "Sent");
                        if (!Directory.Exists(sentPath))
                        {
                            Directory.CreateDirectory(sentPath);
                        }
                        File.Move(logFile, Path.Combine(sentPath, Path.GetFileName(logFile)));
                    }
                }
                catch (Exception ex)
                {
                    Console.Write(ex.Message);
                    //TODO: What to do ???
                }
            }
        }

        /// <summary>
        /// Process the exception and imitate the WCF IErrorHandler implementation and return back the exception that is required to be displatyed the user
        /// </summary>
        /// <param name="lastError"></param>
        /// <returns></returns>
        public Exception ProcessException(Exception lastError)
        {
            System.ServiceModel.Channels.Message fault = null;
            Exception errorDisplayedToUser = null;
            //Here we are trying to imitate the error handling implement by WCF
            //ProvideFault is called as part of the same thread and the exception is passed - in return the Message is populated
            //The Message is the one that is displayed the user and lastError is the one that is logged
            this.ProvideFault(lastError, System.ServiceModel.Channels.MessageVersion.Default, ref fault);
            if (fault != null)
            {
                //Extract the MessageFault from the Message
                System.ServiceModel.Channels.MessageFault messageFault = System.ServiceModel.Channels.MessageFault.CreateFault(fault, int.MaxValue);
                //Extract the Exception form the Message Fault and display the same to the user
                errorDisplayedToUser = messageFault.GetDetail<Indigo.CrossCutting.Utilities.GenericException>();
            }
            //Create a new thread for HandleError which is responsible in logging and FTP'ing the error
            System.Threading.Thread handleErrorThread = new System.Threading.Thread(new System.Threading.ParameterizedThreadStart(this.HandleError));
            handleErrorThread.Start(lastError);
            if (errorDisplayedToUser == null)
            {
                //If the error extracted from the fault is null the use the error from the Server.GetLastError()
                errorDisplayedToUser = lastError;
            }
            return errorDisplayedToUser;
        }

        /// <summary>
        /// Generates a HTML message for the passed exception
        /// </summary>
        /// <param name="error"></param>
        /// <returns></returns>
        public string GetHTMLMessageForException(Exception error)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.AppendLine("<html><body>");
            stringBuilder.AppendLine("<table width='99%' border='1' cellspacing='0' align='center'>");
            stringBuilder.AppendLine("<tr><td colspan=2><font face='arial' size=2 color='brown'>An unhandled exception has occured with the following details</font></td></tr>");
            //stringBuilder.AppendLine("<tr><td width='25%'><font face='arial' size=2 color='brown'>Page</font></td><td colspan=2 width='75%'><font face='arial' size=2 color=blue><b>" + System.Web.HttpContext.Current.Request.Url.ToString() + "</b></font></td></tr>");
            stringBuilder.AppendLine("<tr><td width='25%'><font face='arial' size=2 color='brown'>Message</font></td><td width='75%'><font face='arial' size=2 color=red><b>" + error.Message + "</b></font></td></tr>");
            stringBuilder.AppendLine("<tr><td><font face='arial' size=2 color='brown'>Stack Trace</font></td><td><font color=red><pre>" + error.StackTrace + "</pre></font></td></tr>");
            if (error.Data.Count > 0)
            {
                stringBuilder.AppendLine("<tr><td colspan='2'><font face='arial' size=2 color='brown'>Additional Data</font></td></tr>");
                foreach (System.Collections.DictionaryEntry dataEntry in error.Data)
                {
                    stringBuilder.AppendLine("<tr>");
                    stringBuilder.AppendLine("<td><font face='arial' size=2 color='navy'>" + dataEntry.Key.ToString() + "</td>");
                    stringBuilder.AppendLine("<td><font face='arial' size=2 color='navy'><b>" + dataEntry.Value.ToString() + "</b></td>");
                    stringBuilder.AppendLine("</tr>");
                }
            }
            if (error.InnerException != null)
            {
                stringBuilder.AppendLine("<tr><td><font face='arial' size=2 color='brown'>Detailed Error</font></td><td colspan=2><font color=red><pre>" + error.InnerException.ToString() + "</pre></font></td></tr>");
            }
            stringBuilder.AppendLine("</table>");
            stringBuilder.AppendLine("</body></html>");
            return stringBuilder.ToString();
        }

        /// <summary>
        /// Safely convert the passed dictionary into a string, so that the information in it is preserved where possible
        /// </summary>
        /// <param name="symbolTable"></param>
        /// <returns></returns>
        public static string StringifyDictionary(IDictionary<string, object> symbolTable)
        {
            return StringifyDictionary<object>(symbolTable);
        }

        /// <summary>
        /// Safely convert the passed dictionary into a string, so that the information in it is preserved where possible
        /// </summary>
        /// <returns></returns>
        public static string StringifyDictionary<TValue>(IDictionary<string,TValue> dictionary)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                if (dictionary == null)
                {
                    return "NULL";
                }
                foreach (string key in dictionary.Keys)
                {
                    object value = dictionary[key];
                    if (value == null)
                    {
                        sb.AppendLine("[" + key + "] = NULL");
                    }
                    else
                    {
                        sb.AppendLine("[" + key + "] = (" + value.GetType().Name + ") " + value.ToString());
                    }
                }
                return sb.ToString();
            }
            catch (Exception e)
            {
                return "Error converting dictionary to string " + e.Message;
            }
        }

        /// <summary>
        /// Safely convert the passed list into a string, so that the information in it is preserved where possible
        /// </summary>
        /// <returns></returns>
        public static string StringifyList<TValue>(IList<TValue> list)
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                if (list == null)
                {
                    return "NULL";
                }
                foreach (TValue item in list)
                {
                    if (item == null)
                    {
                        sb.AppendLine("NULL");
                    }
                    else
                    {
                        sb.AppendLine(item.ToString());
                    }
                }
                return sb.ToString();
            }
            catch (Exception e)
            {
                return "Error converting list to string " + e.Message;
            }
        }
    }
}
